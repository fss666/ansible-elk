---
#
# Manage firewall rules if enabled
# Change this in ../install/group_vars/all.yml
#

####### BEGIN ELASTICSEARCH FW RULES #########
# we will be opening TCP/9200 for ES
# if es_listen_external: true is set
# this is needed for elastic connector in browbeat
# we will also listen on TCP/5000 for accepting
# general syslog traffic if syslog_listen_external: true
# is set.
# determine firewall status and take action
# 1) use firewall-cmd if firewalld is utilized
# 2) insert iptables rule if iptables is used

# Firewalld
- name: Enable firewalld autostart
  systemd: name=firewalld enabled=yes
  ignore_errors: true
  register: firewalld_in_use
  no_log: true
  #when: es_listen_external or syslog_listen_external
  become: true

# - debug: msg="{{firewalld_in_use}}"

- name: Start firewalld
  systemd: name=firewalld state=started
  ignore_errors: true
  register: firewalld_is_active
  no_log: true
  #when: es_listen_external
  become: true

#- debug: msg="{{firewalld_is_active}}"

# add firewall rule via firewall-cmd
- name: Add firewall rule for TCP/{{es_local_port}} (es_local_port)
  firewalld:
    port: "{{es_local_port}}/tcp"
    zone: public
    state: enabled
    permanent: yes
    immediate: yes
  # with_items:
  #   - firewall-cmd --zone=public --add-port={{es_local_port}}/tcp --permanent
  #   - firewall-cmd --reload
  ignore_errors: true
  become: true
  # when: es_listen_external and firewalld_in_use.rc == 0 and firewalld_is_active.rc == 0 and firewalld_es_local_port_exists.rc != 0
  when: es_listen_external

# add firewall rule via firewall-cmd
- name: Add firewall rule for TCP/{{logstash_localsyslog_port}} (logstash_localsyslog_port)
  # command: "{{ item }}"
  # with_items:
  #   - firewall-cmd --zone=public --add-port={{logstash_localsyslog_port}}/tcp --permanent
  #   - firewall-cmd --reload
  firewalld:
    port: "{{logstash_localsyslog_port}}/tcp"
    zone: public
    state: enabled
    permanent: yes
    immediate: yes
  ignore_errors: true
  become: true
  # when: syslog_listen_external and firewalld_in_use.rc == 0 and firewalld_is_active.rc == 0 and firewalld_logstash_localsyslog_port_exists.rc != 0
  when: ((logging_backend is none) or (logging_backend == 'logstash'))


## End elasticsearch rules ##

####### BEGIN logstash firewall rules #########

# we need TCP/80 and TCP/8080 open
# determine firewall status and take action
# 1) use firewall-cmd if firewalld is utilized
# 2) insert iptables rule if iptables is used


# add firewall rule via firewall-cmd
- name: Add firewall rule for TCP/{{logstash_syslog_port}} (logstash_syslog_port)
  firewalld:
    port: "{{logstash_syslog_port}}/tcp"
    zone: public
    state: enabled
    permanent: yes
    immediate: yes
  ignore_errors: true
  become: true
  # when: firewalld_in_use.rc == 0 and firewalld_is_active.rc == 0 and firewalld_logstash_syslog_port_exists.rc != 0
  when: ((logging_backend is none) or (logging_backend == 'logstash'))

## END Logstash firewall rules ##

####### BEGIN NGINX FIREWALL RULES #########

# we need TCP/80 and TCP/8080 open
# determine firewall status and take action
# 1) use firewall-cmd if firewalld is utilized
# 2) insert iptables rule if iptables is used

# Firewalld
# add firewall rule via firewall-cmd
- name: Add firewall rule for TCP/{{nginx_kibana_port}} (nginx_kibana_port)
  firewalld:
    port: "{{nginx_kibana_port}}/tcp"
    zone: public
    state: enabled
    permanent: yes
    immediate: yes
  ignore_errors: true
  become: true
  when: firewalld_in_use


# add firewall rule via firewall-cmd
- name: Add firewall rule for TCP/{{elk_server_ssl_cert_port}} (elk_server_ssl_cert_port)
  firewalld:
    port: "{{elk_server_ssl_cert_port}}/tcp"
    zone: public
    state: enabled
    permanent: yes
    immediate: yes
  ignore_errors: true
  become: true
  when: es_listen_external

## END NGINX FIREWALL RULES ##

####### BEGIN FLUENTD FIREWALL RULES ########
# we need TCP/42185 and TCP/9919 open
# determine firewall status and take action
# 1) use firewall-cmd if firewalld is utilized
# 2) insert iptables rule if iptables is used

# Firewalld
# add firewall rule via firewall-cmd
- name: Add firewall rule for TCP/{{fluentd_syslog_port}} (fluentd_syslog_port)
  firewalld:
    port: "{{fluentd_syslog_port}}/tcp"
    zone: public
    state: enabled
    permanent: yes
    immediate: yes
  ignore_errors: true
  become: true
  # when: firewalld_in_use.rc == 0 and firewalld_is_active.rc == 0 and firewalld_fluentd_syslog_exists.rc != 0
  when: (logging_backend == 'fluentd')

# add firewall rule via firewall-cmd
- name: Add firewall rule for TCP/{{fluentd_http_port}} (fluentd_http_port)
  firewalld:
    port: "{{fluentd_http_port}}/tcp"
    zone: public
    state: enabled
    permanent: yes
    immediate: yes
  ignore_errors: true
  become: true
  # when: firewalld_in_use.rc == 0 and firewalld_is_active.rc == 0 and firewalld_fluentd_http_exists.rc != 0
  when: (logging_backend == 'fluentd')

## END FLUENTD FIREWALL RULES ##
